-- L1_PRTY_L0_VIRUS_C_TEAMS -- VIRUS_C_TEAMS -- BKEY_1_PRTY
SELECT	'PRTY' AS CORE_TABLE,
		'PRTY_ID' AS CORE_COLUMN,
		'L1_PRTY_L0_VIRUS_C_TEAMS' AS MAPPING_NAME,
		CASE WHEN BKEY_CNT > 0 THEN 'BKEY_FAILED' ELSE 'BKEY_SUCCEEDED' END AS BKEY_STATUS,
		CASE WHEN CORE_CNT > 0 THEN 'CORE_FAILED' ELSE 'CORE_SUCCEEDED' END AS CORE_STATUS
FROM
(
	SELECT COUNT(*) BKEY_CNT
	FROM GPROD1V_STG.VIRUS_C_TEAMS X
	LEFT JOIN GPROD1V_UTLFW.BKEY_1_PRTY AS BK1
	ON BK1.SOURCE_KEY = TRIM(TEAM_ID) AND BK1.DOMAIN_ID = 53
	WHERE EDW_KEY IS NULL
)BK_CHECK,
(
	SELECT COUNT(*) CORE_CNT
	FROM (SELECT * FROM GPROD1V_UTLFW.BKEY_1_PRTY WHERE DOMAIN_ID=53)BK1
	INNER JOIN GPROD1V_STG.VIRUS_C_TEAMS SRC ON BK1.SOURCE_KEY = TRIM(TEAM_ID)
	LEFT JOIN GPROD1V_BASE.PRTY CORE ON EDW_KEY = PRTY_ID
	WHERE PRTY_ID IS NULL
)CORE_CHECK;

-- L1_ORG_L0_VIRUS_C_TEAMS -- VIRUS_C_TEAMS -- BKEY_1_PRTY
SELECT	'ORG' AS CORE_TABLE,
		'ORG_PRTY_ID' AS CORE_COLUMN,
		'L1_ORG_L0_VIRUS_C_TEAMS' AS MAPPING_NAME,
		CASE WHEN BKEY_CNT > 0 THEN 'BKEY_FAILED' ELSE 'BKEY_SUCCEEDED' END AS BKEY_STATUS,
		CASE WHEN CORE_CNT > 0 THEN 'CORE_FAILED' ELSE 'CORE_SUCCEEDED' END AS CORE_STATUS
FROM
(
	SELECT COUNT(*) BKEY_CNT
	FROM GPROD1V_STG.VIRUS_C_TEAMS X
	LEFT JOIN GPROD1V_UTLFW.BKEY_1_PRTY AS BK1
	ON BK1.SOURCE_KEY = TRIM(TEAM_ID) AND BK1.DOMAIN_ID = 53
	WHERE EDW_KEY IS NULL
)BK_CHECK,
(
	SELECT COUNT(*) CORE_CNT
	FROM (SELECT * FROM GPROD1V_UTLFW.BKEY_1_PRTY WHERE DOMAIN_ID=53)BK1
	INNER JOIN GPROD1V_STG.VIRUS_C_TEAMS SRC ON BK1.SOURCE_KEY = TRIM(TEAM_ID)
	LEFT JOIN GPROD1V_BASE.ORG CORE ON EDW_KEY = ORG_PRTY_ID
	WHERE ORG_PRTY_ID IS NULL
)CORE_CHECK;

-- L1_ORG_NAME_L0_VIRUS_C_TEAMS -- VIRUS_C_TEAMS -- BKEY_1_PRTY
SELECT	'ORG_NAME' AS CORE_TABLE,
		'ORG_PRTY_ID' AS CORE_COLUMN,
		'L1_ORG_NAME_L0_VIRUS_C_TEAMS' AS MAPPING_NAME,
		CASE WHEN BKEY_CNT > 0 THEN 'BKEY_FAILED' ELSE 'BKEY_SUCCEEDED' END AS BKEY_STATUS,
		CASE WHEN CORE_CNT > 0 THEN 'CORE_FAILED' ELSE 'CORE_SUCCEEDED' END AS CORE_STATUS
FROM
(
	SELECT COUNT(*) BKEY_CNT
	FROM GPROD1V_STG.VIRUS_C_TEAMS X
	LEFT JOIN GPROD1V_UTLFW.BKEY_1_PRTY AS BK1
	ON BK1.SOURCE_KEY = TRIM(TEAM_ID) AND BK1.DOMAIN_ID = 53
	WHERE EDW_KEY IS NULL
)BK_CHECK,
(
	SELECT COUNT(*) CORE_CNT
	FROM (SELECT * FROM GPROD1V_UTLFW.BKEY_1_PRTY WHERE DOMAIN_ID=53)BK1
	INNER JOIN GPROD1V_STG.VIRUS_C_TEAMS SRC ON BK1.SOURCE_KEY = TRIM(TEAM_ID)
	LEFT JOIN GPROD1V_BASE.ORG_NAME CORE ON EDW_KEY = ORG_PRTY_ID
	WHERE ORG_PRTY_ID IS NULL
)CORE_CHECK;

-- L1_LOCTR_L0_VIRUS_C_CITY -- VIRUS_C_CITY -- BKEY_17_LOCTR
SELECT	'LOCTR' AS CORE_TABLE,
		'LOCTR_ID' AS CORE_COLUMN,
		'L1_LOCTR_L0_VIRUS_C_CITY' AS MAPPING_NAME,
		CASE WHEN BKEY_CNT > 0 THEN 'BKEY_FAILED' ELSE 'BKEY_SUCCEEDED' END AS BKEY_STATUS,
		CASE WHEN CORE_CNT > 0 THEN 'CORE_FAILED' ELSE 'CORE_SUCCEEDED' END AS CORE_STATUS
FROM
(
	SELECT COUNT(*) BKEY_CNT
	FROM GPROD1V_STG.VIRUS_C_CITY X
	LEFT JOIN GPROD1V_UTLFW.BKEY_17_LOCTR AS BK1
	ON BK1.SOURCE_KEY = TRIM(CITY_ID) AND BK1.DOMAIN_ID = 24
	WHERE EDW_KEY IS NULL
)BK_CHECK,
(
	SELECT COUNT(*) CORE_CNT
	FROM (SELECT * FROM GPROD1V_UTLFW.BKEY_17_LOCTR WHERE DOMAIN_ID=24)BK1
	INNER JOIN GPROD1V_STG.VIRUS_C_CITY SRC ON BK1.SOURCE_KEY = TRIM(CITY_ID)
	LEFT JOIN GPROD1V_BASE.LOCTR CORE ON EDW_KEY = LOCTR_ID
	WHERE LOCTR_ID IS NULL
)CORE_CHECK;

-- L1_GEOGRCL_AREA_L0_VIRUS_C_CITY -- VIRUS_C_CITY -- BKEY_17_LOCTR
SELECT	'GEOGRCL_AREA' AS CORE_TABLE,
		'GEOGRCL_AREA_ID' AS CORE_COLUMN,
		'L1_GEOGRCL_AREA_L0_VIRUS_C_CITY' AS MAPPING_NAME,
		CASE WHEN BKEY_CNT > 0 THEN 'BKEY_FAILED' ELSE 'BKEY_SUCCEEDED' END AS BKEY_STATUS,
		CASE WHEN CORE_CNT > 0 THEN 'CORE_FAILED' ELSE 'CORE_SUCCEEDED' END AS CORE_STATUS
FROM
(
	SELECT COUNT(*) BKEY_CNT
	FROM GPROD1V_STG.VIRUS_C_CITY X
	LEFT JOIN GPROD1V_UTLFW.BKEY_17_LOCTR AS BK1
	ON BK1.SOURCE_KEY = TRIM(CITY_ID) AND BK1.DOMAIN_ID = 24
	WHERE EDW_KEY IS NULL
)BK_CHECK,
(
	SELECT COUNT(*) CORE_CNT
	FROM (SELECT * FROM GPROD1V_UTLFW.BKEY_17_LOCTR WHERE DOMAIN_ID=24)BK1
	INNER JOIN GPROD1V_STG.VIRUS_C_CITY SRC ON BK1.SOURCE_KEY = TRIM(CITY_ID)
	LEFT JOIN GPROD1V_BASE.GEOGRCL_AREA CORE ON EDW_KEY = GEOGRCL_AREA_ID
	WHERE GEOGRCL_AREA_ID IS NULL
)CORE_CHECK;

-- L1_GEOGRCL_AREA_RLTD_L0_VIRUS_C_CITY -- VIRUS_C_CITY -- BKEY_17_LOCTR
SELECT	'GEOGRCL_AREA_RLTD' AS CORE_TABLE,
		'GEOGRCL_AREA_ID' AS CORE_COLUMN,
		'L1_GEOGRCL_AREA_RLTD_L0_VIRUS_C_CITY' AS MAPPING_NAME,
		CASE WHEN BKEY_CNT > 0 THEN 'BKEY_FAILED' ELSE 'BKEY_SUCCEEDED' END AS BKEY_STATUS,
		CASE WHEN CORE_CNT > 0 THEN 'CORE_FAILED' ELSE 'CORE_SUCCEEDED' END AS CORE_STATUS
FROM
(
	SELECT COUNT(*) BKEY_CNT
	FROM GPROD1V_STG.VIRUS_C_CITY X
	LEFT JOIN GPROD1V_UTLFW.BKEY_17_LOCTR AS BK1
	ON BK1.SOURCE_KEY = TRIM(CITY_ID) AND BK1.DOMAIN_ID = 24
	WHERE EDW_KEY IS NULL
)BK_CHECK,
(
	SELECT COUNT(*) CORE_CNT
	FROM (SELECT * FROM GPROD1V_UTLFW.BKEY_17_LOCTR WHERE DOMAIN_ID=24)BK1
	INNER JOIN GPROD1V_STG.VIRUS_C_CITY SRC ON BK1.SOURCE_KEY = TRIM(CITY_ID)
	LEFT JOIN GPROD1V_BASE.GEOGRCL_AREA_RLTD CORE ON EDW_KEY = GEOGRCL_AREA_ID
	WHERE GEOGRCL_AREA_ID IS NULL
)CORE_CHECK;

-- L1_PRTY_LOCTR_L0_VIRUS_C_TEAMS_CITY -- VIRUS_C_TEAMS -- BKEY_1_PRTY
SELECT	'PRTY_LOCTR' AS CORE_TABLE,
		'PRTY_ID' AS CORE_COLUMN,
		'L1_PRTY_LOCTR_L0_VIRUS_C_TEAMS_CITY' AS MAPPING_NAME,
		CASE WHEN BKEY_CNT > 0 THEN 'BKEY_FAILED' ELSE 'BKEY_SUCCEEDED' END AS BKEY_STATUS,
		CASE WHEN CORE_CNT > 0 THEN 'CORE_FAILED' ELSE 'CORE_SUCCEEDED' END AS CORE_STATUS
FROM
(
	SELECT COUNT(*) BKEY_CNT
	FROM GPROD1V_STG.VIRUS_C_TEAMS X
	LEFT JOIN GPROD1V_UTLFW.BKEY_1_PRTY AS BK1
	ON BK1.SOURCE_KEY = TRIM(TEAM_ID) AND BK1.DOMAIN_ID = 53
	WHERE EDW_KEY IS NULL
)BK_CHECK,
(
	SELECT COUNT(*) CORE_CNT
	FROM (SELECT * FROM GPROD1V_UTLFW.BKEY_1_PRTY WHERE DOMAIN_ID=53)BK1
	INNER JOIN GPROD1V_STG.VIRUS_C_TEAMS SRC ON BK1.SOURCE_KEY = TRIM(TEAM_ID)
	LEFT JOIN GPROD1V_BASE.PRTY_LOCTR CORE ON EDW_KEY = PRTY_ID
	WHERE PRTY_ID IS NULL
)CORE_CHECK;

-- L1_PRTY_LOCTR_L0_VIRUS_C_TEAMS_CITY -- VIRUS_C_TEAMS -- BKEY_17_LOCTR
SELECT	'PRTY_LOCTR' AS CORE_TABLE,
		'LOCTR_ID' AS CORE_COLUMN,
		'L1_PRTY_LOCTR_L0_VIRUS_C_TEAMS_CITY' AS MAPPING_NAME,
		CASE WHEN BKEY_CNT > 0 THEN 'BKEY_FAILED' ELSE 'BKEY_SUCCEEDED' END AS BKEY_STATUS,
		CASE WHEN CORE_CNT > 0 THEN 'CORE_FAILED' ELSE 'CORE_SUCCEEDED' END AS CORE_STATUS
FROM
(
	SELECT COUNT(*) BKEY_CNT
	FROM GPROD1V_STG.VIRUS_C_TEAMS X
	LEFT JOIN GPROD1V_UTLFW.BKEY_17_LOCTR AS BK1
	ON BK1.SOURCE_KEY = TRIM(CITY_ID) AND BK1.DOMAIN_ID = 24
	WHERE EDW_KEY IS NULL
)BK_CHECK,
(
	SELECT COUNT(*) CORE_CNT
	FROM (SELECT * FROM GPROD1V_UTLFW.BKEY_17_LOCTR WHERE DOMAIN_ID=24)BK1
	INNER JOIN GPROD1V_STG.VIRUS_C_TEAMS SRC ON BK1.SOURCE_KEY = TRIM(CITY_ID)
	LEFT JOIN GPROD1V_BASE.PRTY_LOCTR CORE ON EDW_KEY = LOCTR_ID
	WHERE LOCTR_ID IS NULL
)CORE_CHECK;

-- L1_PRTY_L0_VIRUS_C_PERSON_DETAILS -- VIRUS_C_PERSON_DETAILS -- BKEY_1_PRTY
SELECT	'PRTY' AS CORE_TABLE,
		'PRTY_ID' AS CORE_COLUMN,
		'L1_PRTY_L0_VIRUS_C_PERSON_DETAILS' AS MAPPING_NAME,
		CASE WHEN BKEY_CNT > 0 THEN 'BKEY_FAILED' ELSE 'BKEY_SUCCEEDED' END AS BKEY_STATUS,
		CASE WHEN CORE_CNT > 0 THEN 'CORE_FAILED' ELSE 'CORE_SUCCEEDED' END AS CORE_STATUS
FROM
(
	SELECT COUNT(*) BKEY_CNT
	FROM GPROD1V_STG.VIRUS_C_PERSON_DETAILS X
	LEFT JOIN GPROD1V_UTLFW.BKEY_1_PRTY AS BK1
	ON BK1.SOURCE_KEY = TRIM(NATIONAL_ID) AND BK1.DOMAIN_ID = 1
	WHERE EDW_KEY IS NULL
)BK_CHECK,
(
	SELECT COUNT(*) CORE_CNT
	FROM (SELECT * FROM GPROD1V_UTLFW.BKEY_1_PRTY WHERE DOMAIN_ID=1)BK1
	INNER JOIN GPROD1V_STG.VIRUS_C_PERSON_DETAILS SRC ON BK1.SOURCE_KEY = TRIM(NATIONAL_ID)
	LEFT JOIN GPROD1V_BASE.PRTY CORE ON EDW_KEY = PRTY_ID
	WHERE PRTY_ID IS NULL
)CORE_CHECK;

-- L1_INDIV_NAME_L0_VIRUS_C_PERSON_DETAILS -- VIRUS_C_PERSON_DETAILS -- BKEY_1_PRTY
SELECT	'INDIV_NAME' AS CORE_TABLE,
		'INDIV_PRTY_ID' AS CORE_COLUMN,
		'L1_INDIV_NAME_L0_VIRUS_C_PERSON_DETAILS' AS MAPPING_NAME,
		CASE WHEN BKEY_CNT > 0 THEN 'BKEY_FAILED' ELSE 'BKEY_SUCCEEDED' END AS BKEY_STATUS,
		CASE WHEN CORE_CNT > 0 THEN 'CORE_FAILED' ELSE 'CORE_SUCCEEDED' END AS CORE_STATUS
FROM
(
	SELECT COUNT(*) BKEY_CNT
	FROM GPROD1V_STG.VIRUS_C_PERSON_DETAILS X
	LEFT JOIN GPROD1V_UTLFW.BKEY_1_PRTY AS BK1
	ON BK1.SOURCE_KEY = TRIM(NATIONAL_ID) AND BK1.DOMAIN_ID = 1
	WHERE EDW_KEY IS NULL
)BK_CHECK,
(
	SELECT COUNT(*) CORE_CNT
	FROM (SELECT * FROM GPROD1V_UTLFW.BKEY_1_PRTY WHERE DOMAIN_ID=1)BK1
	INNER JOIN GPROD1V_STG.VIRUS_C_PERSON_DETAILS SRC ON BK1.SOURCE_KEY = TRIM(NATIONAL_ID)
	LEFT JOIN GPROD1V_BASE.INDIV_NAME CORE ON EDW_KEY = INDIV_PRTY_ID
	WHERE INDIV_PRTY_ID IS NULL
)CORE_CHECK;

-- L1_LOCTR_L0_VIRUS_C_PERSON_DETAILS_MOBILE_NUMBER -- VIRUS_C_PERSON_DETAILS -- BKEY_17_LOCTR
SELECT	'LOCTR' AS CORE_TABLE,
		'LOCTR_ID' AS CORE_COLUMN,
		'L1_LOCTR_L0_VIRUS_C_PERSON_DETAILS_MOBILE_NUMBER' AS MAPPING_NAME,
		CASE WHEN BKEY_CNT > 0 THEN 'BKEY_FAILED' ELSE 'BKEY_SUCCEEDED' END AS BKEY_STATUS,
		CASE WHEN CORE_CNT > 0 THEN 'CORE_FAILED' ELSE 'CORE_SUCCEEDED' END AS CORE_STATUS
FROM
(
	SELECT COUNT(*) BKEY_CNT
	FROM GPROD1V_STG.VIRUS_C_PERSON_DETAILS X
	LEFT JOIN GPROD1V_UTLFW.BKEY_17_LOCTR AS BK1
	ON BK1.SOURCE_KEY = TRIM(MOBILE_NUMBER) AND BK1.DOMAIN_ID = 2
	WHERE EDW_KEY IS NULL
)BK_CHECK,
(
	SELECT COUNT(*) CORE_CNT
	FROM (SELECT * FROM GPROD1V_UTLFW.BKEY_17_LOCTR WHERE DOMAIN_ID=2)BK1
	INNER JOIN GPROD1V_STG.VIRUS_C_PERSON_DETAILS SRC ON BK1.SOURCE_KEY = TRIM(MOBILE_NUMBER)
	LEFT JOIN GPROD1V_BASE.LOCTR CORE ON EDW_KEY = LOCTR_ID
	WHERE LOCTR_ID IS NULL
)CORE_CHECK;

-- L1_ADDR_L0_VIRUS_C_PERSON_DETAILS_MOBILE_NUMBER -- VIRUS_C_PERSON_DETAILS -- BKEY_17_LOCTR
SELECT	'ADDR' AS CORE_TABLE,
		'ADDR_ID' AS CORE_COLUMN,
		'L1_ADDR_L0_VIRUS_C_PERSON_DETAILS_MOBILE_NUMBER' AS MAPPING_NAME,
		CASE WHEN BKEY_CNT > 0 THEN 'BKEY_FAILED' ELSE 'BKEY_SUCCEEDED' END AS BKEY_STATUS,
		CASE WHEN CORE_CNT > 0 THEN 'CORE_FAILED' ELSE 'CORE_SUCCEEDED' END AS CORE_STATUS
FROM
(
	SELECT COUNT(*) BKEY_CNT
	FROM GPROD1V_STG.VIRUS_C_PERSON_DETAILS X
	LEFT JOIN GPROD1V_UTLFW.BKEY_17_LOCTR AS BK1
	ON BK1.SOURCE_KEY = TRIM(MOBILE_NUMBER) AND BK1.DOMAIN_ID = 2
	WHERE EDW_KEY IS NULL
)BK_CHECK,
(
	SELECT COUNT(*) CORE_CNT
	FROM (SELECT * FROM GPROD1V_UTLFW.BKEY_17_LOCTR WHERE DOMAIN_ID=2)BK1
	INNER JOIN GPROD1V_STG.VIRUS_C_PERSON_DETAILS SRC ON BK1.SOURCE_KEY = TRIM(MOBILE_NUMBER)
	LEFT JOIN GPROD1V_BASE.ADDR CORE ON EDW_KEY = ADDR_ID
	WHERE ADDR_ID IS NULL
)CORE_CHECK;

-- L1_TLPHN_NUM_L0_VIRUS_C_PERSON_DETAILS_MOBILE_NUMBER -- VIRUS_C_PERSON_DETAILS -- BKEY_17_LOCTR
SELECT	'TLPHN_NUM' AS CORE_TABLE,
		'TLPHN_NUM_ID' AS CORE_COLUMN,
		'L1_TLPHN_NUM_L0_VIRUS_C_PERSON_DETAILS_MOBILE_NUMBER' AS MAPPING_NAME,
		CASE WHEN BKEY_CNT > 0 THEN 'BKEY_FAILED' ELSE 'BKEY_SUCCEEDED' END AS BKEY_STATUS,
		CASE WHEN CORE_CNT > 0 THEN 'CORE_FAILED' ELSE 'CORE_SUCCEEDED' END AS CORE_STATUS
FROM
(
	SELECT COUNT(*) BKEY_CNT
	FROM GPROD1V_STG.VIRUS_C_PERSON_DETAILS X
	LEFT JOIN GPROD1V_UTLFW.BKEY_17_LOCTR AS BK1
	ON BK1.SOURCE_KEY = TRIM(MOBILE_NUMBER) AND BK1.DOMAIN_ID = 2
	WHERE EDW_KEY IS NULL
)BK_CHECK,
(
	SELECT COUNT(*) CORE_CNT
	FROM (SELECT * FROM GPROD1V_UTLFW.BKEY_17_LOCTR WHERE DOMAIN_ID=2)BK1
	INNER JOIN GPROD1V_STG.VIRUS_C_PERSON_DETAILS SRC ON BK1.SOURCE_KEY = TRIM(MOBILE_NUMBER)
	LEFT JOIN GPROD1V_BASE.TLPHN_NUM CORE ON EDW_KEY = TLPHN_NUM_ID
	WHERE TLPHN_NUM_ID IS NULL
)CORE_CHECK;

-- L1_PRTY_LOCTR_L0_VIRUS_C_PERSON_DETAILS_MOBILE_NUMBER -- VIRUS_C_PERSON_DETAILS -- BKEY_1_PRTY
SELECT	'PRTY_LOCTR' AS CORE_TABLE,
		'PRTY_ID' AS CORE_COLUMN,
		'L1_PRTY_LOCTR_L0_VIRUS_C_PERSON_DETAILS_MOBILE_NUMBER' AS MAPPING_NAME,
		CASE WHEN BKEY_CNT > 0 THEN 'BKEY_FAILED' ELSE 'BKEY_SUCCEEDED' END AS BKEY_STATUS,
		CASE WHEN CORE_CNT > 0 THEN 'CORE_FAILED' ELSE 'CORE_SUCCEEDED' END AS CORE_STATUS
FROM
(
	SELECT COUNT(*) BKEY_CNT
	FROM GPROD1V_STG.VIRUS_C_PERSON_DETAILS X
	LEFT JOIN GPROD1V_UTLFW.BKEY_1_PRTY AS BK1
	ON BK1.SOURCE_KEY = TRIM(NATIONAL_ID) AND BK1.DOMAIN_ID = 1
	WHERE EDW_KEY IS NULL
)BK_CHECK,
(
	SELECT COUNT(*) CORE_CNT
	FROM (SELECT * FROM GPROD1V_UTLFW.BKEY_1_PRTY WHERE DOMAIN_ID=1)BK1
	INNER JOIN GPROD1V_STG.VIRUS_C_PERSON_DETAILS SRC ON BK1.SOURCE_KEY = TRIM(NATIONAL_ID)
	LEFT JOIN GPROD1V_BASE.PRTY_LOCTR CORE ON EDW_KEY = PRTY_ID
	WHERE PRTY_ID IS NULL
)CORE_CHECK;

-- L1_PRTY_LOCTR_L0_VIRUS_C_PERSON_DETAILS_MOBILE_NUMBER -- VIRUS_C_PERSON_DETAILS -- BKEY_17_LOCTR
SELECT	'PRTY_LOCTR' AS CORE_TABLE,
		'LOCTR_ID' AS CORE_COLUMN,
		'L1_PRTY_LOCTR_L0_VIRUS_C_PERSON_DETAILS_MOBILE_NUMBER' AS MAPPING_NAME,
		CASE WHEN BKEY_CNT > 0 THEN 'BKEY_FAILED' ELSE 'BKEY_SUCCEEDED' END AS BKEY_STATUS,
		CASE WHEN CORE_CNT > 0 THEN 'CORE_FAILED' ELSE 'CORE_SUCCEEDED' END AS CORE_STATUS
FROM
(
	SELECT COUNT(*) BKEY_CNT
	FROM GPROD1V_STG.VIRUS_C_PERSON_DETAILS X
	LEFT JOIN GPROD1V_UTLFW.BKEY_17_LOCTR AS BK1
	ON BK1.SOURCE_KEY = TRIM(MOBILE_NUMBER) AND BK1.DOMAIN_ID = 2
	WHERE EDW_KEY IS NULL
)BK_CHECK,
(
	SELECT COUNT(*) CORE_CNT
	FROM (SELECT * FROM GPROD1V_UTLFW.BKEY_17_LOCTR WHERE DOMAIN_ID=2)BK1
	INNER JOIN GPROD1V_STG.VIRUS_C_PERSON_DETAILS SRC ON BK1.SOURCE_KEY = TRIM(MOBILE_NUMBER)
	LEFT JOIN GPROD1V_BASE.PRTY_LOCTR CORE ON EDW_KEY = LOCTR_ID
	WHERE LOCTR_ID IS NULL
)CORE_CHECK;

-- L1_PRTY_RLTD_L0_VIRUS_C_PERSON_TEAM -- VIRUS_C_PERSON_DETAILS -- BKEY_1_PRTY
SELECT	'PRTY_RLTD' AS CORE_TABLE,
		'PRTY_ID' AS CORE_COLUMN,
		'L1_PRTY_RLTD_L0_VIRUS_C_PERSON_TEAM' AS MAPPING_NAME,
		CASE WHEN BKEY_CNT > 0 THEN 'BKEY_FAILED' ELSE 'BKEY_SUCCEEDED' END AS BKEY_STATUS,
		CASE WHEN CORE_CNT > 0 THEN 'CORE_FAILED' ELSE 'CORE_SUCCEEDED' END AS CORE_STATUS
FROM
(
	SELECT COUNT(*) BKEY_CNT
	FROM GPROD1V_STG.VIRUS_C_PERSON_DETAILS X
	LEFT JOIN GPROD1V_UTLFW.BKEY_1_PRTY AS BK1
	ON BK1.SOURCE_KEY = TRIM(NATIONAL_ID) AND BK1.DOMAIN_ID = 1
	WHERE EDW_KEY IS NULL
)BK_CHECK,
(
	SELECT COUNT(*) CORE_CNT
	FROM (SELECT * FROM GPROD1V_UTLFW.BKEY_1_PRTY WHERE DOMAIN_ID=1)BK1
	INNER JOIN GPROD1V_STG.VIRUS_C_PERSON_DETAILS SRC ON BK1.SOURCE_KEY = TRIM(NATIONAL_ID)
	LEFT JOIN GPROD1V_BASE.PRTY_RLTD CORE ON EDW_KEY = PRTY_ID
	WHERE PRTY_ID IS NULL
)CORE_CHECK;

-- L1_PRTY_RLTD_L0_VIRUS_C_PERSON_TEAM -- VIRUS_C_PERSON_DETAILS -- BKEY_1_PRTY
SELECT	'PRTY_RLTD' AS CORE_TABLE,
		'RLTD_PRTY_ID' AS CORE_COLUMN,
		'L1_PRTY_RLTD_L0_VIRUS_C_PERSON_TEAM' AS MAPPING_NAME,
		CASE WHEN BKEY_CNT > 0 THEN 'BKEY_FAILED' ELSE 'BKEY_SUCCEEDED' END AS BKEY_STATUS,
		CASE WHEN CORE_CNT > 0 THEN 'CORE_FAILED' ELSE 'CORE_SUCCEEDED' END AS CORE_STATUS
FROM
(
	SELECT COUNT(*) BKEY_CNT
	FROM GPROD1V_STG.VIRUS_C_PERSON_DETAILS X
	LEFT JOIN GPROD1V_UTLFW.BKEY_1_PRTY AS BK1
	ON BK1.SOURCE_KEY = TRIM(TEAM_ID) AND BK1.DOMAIN_ID = 53
	WHERE EDW_KEY IS NULL
)BK_CHECK,
(
	SELECT COUNT(*) CORE_CNT
	FROM (SELECT * FROM GPROD1V_UTLFW.BKEY_1_PRTY WHERE DOMAIN_ID=53)BK1
	INNER JOIN GPROD1V_STG.VIRUS_C_PERSON_DETAILS SRC ON BK1.SOURCE_KEY = TRIM(TEAM_ID)
	LEFT JOIN GPROD1V_BASE.PRTY_RLTD CORE ON EDW_KEY = RLTD_PRTY_ID
	WHERE RLTD_PRTY_ID IS NULL
)CORE_CHECK;

-- L1_INDIV_DISEASE_STS_L0_VIRUS_C_PERSON_DETAILS_DIABETIC_FLAG -- VIRUS_C_PERSON_DETAILS -- BKEY_1_PRTY
SELECT	'INDIV_DISEASE_STS' AS CORE_TABLE,
		'INDIV_PRTY_ID' AS CORE_COLUMN,
		'L1_INDIV_DISEASE_STS_L0_VIRUS_C_PERSON_DETAILS_DIABETIC_FLAG' AS MAPPING_NAME,
		CASE WHEN BKEY_CNT > 0 THEN 'BKEY_FAILED' ELSE 'BKEY_SUCCEEDED' END AS BKEY_STATUS,
		CASE WHEN CORE_CNT > 0 THEN 'CORE_FAILED' ELSE 'CORE_SUCCEEDED' END AS CORE_STATUS
FROM
(
	SELECT COUNT(*) BKEY_CNT
	FROM GPROD1V_STG.VIRUS_C_PERSON_DETAILS X
	LEFT JOIN GPROD1V_UTLFW.BKEY_1_PRTY AS BK1
	ON BK1.SOURCE_KEY = TRIM(NATIONAL_ID) AND BK1.DOMAIN_ID = 1
	WHERE EDW_KEY IS NULL
)BK_CHECK,
(
	SELECT COUNT(*) CORE_CNT
	FROM (SELECT * FROM GPROD1V_UTLFW.BKEY_1_PRTY WHERE DOMAIN_ID=1)BK1
	INNER JOIN GPROD1V_STG.VIRUS_C_PERSON_DETAILS SRC ON BK1.SOURCE_KEY = TRIM(NATIONAL_ID)
	LEFT JOIN GPROD1V_BASE.INDIV_DISEASE_STS CORE ON EDW_KEY = INDIV_PRTY_ID
	WHERE INDIV_PRTY_ID IS NULL
)CORE_CHECK;

-- L1_INDIV_DISEASE_STS_L0_VIRUS_C_PERSON_DETAILS_DIABETIC_FLAG -- VIRUS_C_PERSON_DETAILS -- BKEY_43_DISEASE_REGISTRY
SELECT	'INDIV_DISEASE_STS' AS CORE_TABLE,
		'DISEASE_REGISTRY_ID' AS CORE_COLUMN,
		'L1_INDIV_DISEASE_STS_L0_VIRUS_C_PERSON_DETAILS_DIABETIC_FLAG' AS MAPPING_NAME,
		CASE WHEN BKEY_CNT > 0 THEN 'BKEY_FAILED' ELSE 'BKEY_SUCCEEDED' END AS BKEY_STATUS,
		CASE WHEN CORE_CNT > 0 THEN 'CORE_FAILED' ELSE 'CORE_SUCCEEDED' END AS CORE_STATUS
FROM
(
	SELECT COUNT(*) BKEY_CNT
	FROM GPROD1V_STG.VIRUS_C_PERSON_DETAILS X
	LEFT JOIN GPROD1V_UTLFW.BKEY_43_DISEASE_REGISTRY AS BK1
	ON BK1.SOURCE_KEY = TRIM(E11.0') AND BK1.DOMAIN_ID = 1
	WHERE EDW_KEY IS NULL
)BK_CHECK,
(
	SELECT COUNT(*) CORE_CNT
	FROM (SELECT * FROM GPROD1V_UTLFW.BKEY_43_DISEASE_REGISTRY WHERE DOMAIN_ID=1)BK1
	INNER JOIN GPROD1V_STG.VIRUS_C_PERSON_DETAILS SRC ON BK1.SOURCE_KEY = TRIM(E11.0')
	LEFT JOIN GPROD1V_BASE.INDIV_DISEASE_STS CORE ON EDW_KEY = DISEASE_REGISTRY_ID
	WHERE DISEASE_REGISTRY_ID IS NULL
)CORE_CHECK;

-- L1_INDIV_DISEASE_STS_L0_VIRUS_C_PERSON_DETAILS_HYPERTENSIVE_FLAG -- VIRUS_C_PERSON_DETAILS -- BKEY_1_PRTY
SELECT	'INDIV_DISEASE_STS' AS CORE_TABLE,
		'INDIV_PRTY_ID' AS CORE_COLUMN,
		'L1_INDIV_DISEASE_STS_L0_VIRUS_C_PERSON_DETAILS_HYPERTENSIVE_FLAG' AS MAPPING_NAME,
		CASE WHEN BKEY_CNT > 0 THEN 'BKEY_FAILED' ELSE 'BKEY_SUCCEEDED' END AS BKEY_STATUS,
		CASE WHEN CORE_CNT > 0 THEN 'CORE_FAILED' ELSE 'CORE_SUCCEEDED' END AS CORE_STATUS
FROM
(
	SELECT COUNT(*) BKEY_CNT
	FROM GPROD1V_STG.VIRUS_C_PERSON_DETAILS X
	LEFT JOIN GPROD1V_UTLFW.BKEY_1_PRTY AS BK1
	ON BK1.SOURCE_KEY = TRIM(NATIONAL_ID) AND BK1.DOMAIN_ID = 1
	WHERE EDW_KEY IS NULL
)BK_CHECK,
(
	SELECT COUNT(*) CORE_CNT
	FROM (SELECT * FROM GPROD1V_UTLFW.BKEY_1_PRTY WHERE DOMAIN_ID=1)BK1
	INNER JOIN GPROD1V_STG.VIRUS_C_PERSON_DETAILS SRC ON BK1.SOURCE_KEY = TRIM(NATIONAL_ID)
	LEFT JOIN GPROD1V_BASE.INDIV_DISEASE_STS CORE ON EDW_KEY = INDIV_PRTY_ID
	WHERE INDIV_PRTY_ID IS NULL
)CORE_CHECK;

-- L1_INDIV_DISEASE_STS_L0_VIRUS_C_PERSON_DETAILS_HYPERTENSIVE_FLAG -- VIRUS_C_PERSON_DETAILS -- BKEY_43_DISEASE_REGISTRY
SELECT	'INDIV_DISEASE_STS' AS CORE_TABLE,
		'DISEASE_REGISTRY_ID' AS CORE_COLUMN,
		'L1_INDIV_DISEASE_STS_L0_VIRUS_C_PERSON_DETAILS_HYPERTENSIVE_FLAG' AS MAPPING_NAME,
		CASE WHEN BKEY_CNT > 0 THEN 'BKEY_FAILED' ELSE 'BKEY_SUCCEEDED' END AS BKEY_STATUS,
		CASE WHEN CORE_CNT > 0 THEN 'CORE_FAILED' ELSE 'CORE_SUCCEEDED' END AS CORE_STATUS
FROM
(
	SELECT COUNT(*) BKEY_CNT
	FROM GPROD1V_STG.VIRUS_C_PERSON_DETAILS X
	LEFT JOIN GPROD1V_UTLFW.BKEY_43_DISEASE_REGISTRY AS BK1
	ON BK1.SOURCE_KEY = TRIM('I10') AND BK1.DOMAIN_ID = 1
	WHERE EDW_KEY IS NULL
)BK_CHECK,
(
	SELECT COUNT(*) CORE_CNT
	FROM (SELECT * FROM GPROD1V_UTLFW.BKEY_43_DISEASE_REGISTRY WHERE DOMAIN_ID=1)BK1
	INNER JOIN GPROD1V_STG.VIRUS_C_PERSON_DETAILS SRC ON BK1.SOURCE_KEY = TRIM('I10')
	LEFT JOIN GPROD1V_BASE.INDIV_DISEASE_STS CORE ON EDW_KEY = DISEASE_REGISTRY_ID
	WHERE DISEASE_REGISTRY_ID IS NULL
)CORE_CHECK;

-- L1_INDIV_DISEASE_STS_L0_VIRUS_C_PERSON_DETAILS_SCAN_RESULT -- VIRUS_C_PERSON_DETAILS -- BKEY_1_PRTY
SELECT	'INDIV_DISEASE_STS' AS CORE_TABLE,
		'INDIV_PRTY_ID' AS CORE_COLUMN,
		'L1_INDIV_DISEASE_STS_L0_VIRUS_C_PERSON_DETAILS_SCAN_RESULT' AS MAPPING_NAME,
		CASE WHEN BKEY_CNT > 0 THEN 'BKEY_FAILED' ELSE 'BKEY_SUCCEEDED' END AS BKEY_STATUS,
		CASE WHEN CORE_CNT > 0 THEN 'CORE_FAILED' ELSE 'CORE_SUCCEEDED' END AS CORE_STATUS
FROM
(
	SELECT COUNT(*) BKEY_CNT
	FROM GPROD1V_STG.VIRUS_C_PERSON_DETAILS X
	LEFT JOIN GPROD1V_UTLFW.BKEY_1_PRTY AS BK1
	ON BK1.SOURCE_KEY = TRIM(NATIONAL_ID) AND BK1.DOMAIN_ID = 1
	WHERE EDW_KEY IS NULL
)BK_CHECK,
(
	SELECT COUNT(*) CORE_CNT
	FROM (SELECT * FROM GPROD1V_UTLFW.BKEY_1_PRTY WHERE DOMAIN_ID=1)BK1
	INNER JOIN GPROD1V_STG.VIRUS_C_PERSON_DETAILS SRC ON BK1.SOURCE_KEY = TRIM(NATIONAL_ID)
	LEFT JOIN GPROD1V_BASE.INDIV_DISEASE_STS CORE ON EDW_KEY = INDIV_PRTY_ID
	WHERE INDIV_PRTY_ID IS NULL
)CORE_CHECK;

-- L1_INDIV_DISEASE_STS_L0_VIRUS_C_PERSON_DETAILS_SCAN_RESULT -- VIRUS_C_PERSON_DETAILS -- BKEY_43_DISEASE_REGISTRY
SELECT	'INDIV_DISEASE_STS' AS CORE_TABLE,
		'DISEASE_REGISTRY_ID' AS CORE_COLUMN,
		'L1_INDIV_DISEASE_STS_L0_VIRUS_C_PERSON_DETAILS_SCAN_RESULT' AS MAPPING_NAME,
		CASE WHEN BKEY_CNT > 0 THEN 'BKEY_FAILED' ELSE 'BKEY_SUCCEEDED' END AS BKEY_STATUS,
		CASE WHEN CORE_CNT > 0 THEN 'CORE_FAILED' ELSE 'CORE_SUCCEEDED' END AS CORE_STATUS
FROM
(
	SELECT COUNT(*) BKEY_CNT
	FROM GPROD1V_STG.VIRUS_C_PERSON_DETAILS X
	LEFT JOIN GPROD1V_UTLFW.BKEY_43_DISEASE_REGISTRY AS BK1
	ON BK1.SOURCE_KEY = TRIM('B18.2') AND BK1.DOMAIN_ID = 1
	WHERE EDW_KEY IS NULL
)BK_CHECK,
(
	SELECT COUNT(*) CORE_CNT
	FROM (SELECT * FROM GPROD1V_UTLFW.BKEY_43_DISEASE_REGISTRY WHERE DOMAIN_ID=1)BK1
	INNER JOIN GPROD1V_STG.VIRUS_C_PERSON_DETAILS SRC ON BK1.SOURCE_KEY = TRIM('B18.2')
	LEFT JOIN GPROD1V_BASE.INDIV_DISEASE_STS CORE ON EDW_KEY = DISEASE_REGISTRY_ID
	WHERE DISEASE_REGISTRY_ID IS NULL
)CORE_CHECK;

-- L1_INDIV_MEDCL_MSR_L0_VIRUS_C_PERSON_DETAILS_LOW_PRESSURE -- VIRUS_C_PERSON_DETAILS -- BKEY_1_PRTY
SELECT	'INDIV_MEDCL_MSR' AS CORE_TABLE,
		'INDIV_PRTY_ID' AS CORE_COLUMN,
		'L1_INDIV_MEDCL_MSR_L0_VIRUS_C_PERSON_DETAILS_LOW_PRESSURE' AS MAPPING_NAME,
		CASE WHEN BKEY_CNT > 0 THEN 'BKEY_FAILED' ELSE 'BKEY_SUCCEEDED' END AS BKEY_STATUS,
		CASE WHEN CORE_CNT > 0 THEN 'CORE_FAILED' ELSE 'CORE_SUCCEEDED' END AS CORE_STATUS
FROM
(
	SELECT COUNT(*) BKEY_CNT
	FROM GPROD1V_STG.VIRUS_C_PERSON_DETAILS X
	LEFT JOIN GPROD1V_UTLFW.BKEY_1_PRTY AS BK1
	ON BK1.SOURCE_KEY = TRIM(NATIONAL_ID) AND BK1.DOMAIN_ID = 1
	WHERE EDW_KEY IS NULL
)BK_CHECK,
(
	SELECT COUNT(*) CORE_CNT
	FROM (SELECT * FROM GPROD1V_UTLFW.BKEY_1_PRTY WHERE DOMAIN_ID=1)BK1
	INNER JOIN GPROD1V_STG.VIRUS_C_PERSON_DETAILS SRC ON BK1.SOURCE_KEY = TRIM(NATIONAL_ID)
	LEFT JOIN GPROD1V_BASE.INDIV_MEDCL_MSR CORE ON EDW_KEY = INDIV_PRTY_ID
	WHERE INDIV_PRTY_ID IS NULL
)CORE_CHECK;

-- L1_INDIV_MEDCL_MSR_L0_VIRUS_C_PERSON_DETAILS_HIGH_PRESSURE -- VIRUS_C_PERSON_DETAILS -- BKEY_1_PRTY
SELECT	'INDIV_MEDCL_MSR' AS CORE_TABLE,
		'INDIV_PRTY_ID' AS CORE_COLUMN,
		'L1_INDIV_MEDCL_MSR_L0_VIRUS_C_PERSON_DETAILS_HIGH_PRESSURE' AS MAPPING_NAME,
		CASE WHEN BKEY_CNT > 0 THEN 'BKEY_FAILED' ELSE 'BKEY_SUCCEEDED' END AS BKEY_STATUS,
		CASE WHEN CORE_CNT > 0 THEN 'CORE_FAILED' ELSE 'CORE_SUCCEEDED' END AS CORE_STATUS
FROM
(
	SELECT COUNT(*) BKEY_CNT
	FROM GPROD1V_STG.VIRUS_C_PERSON_DETAILS X
	LEFT JOIN GPROD1V_UTLFW.BKEY_1_PRTY AS BK1
	ON BK1.SOURCE_KEY = TRIM(NATIONAL_ID) AND BK1.DOMAIN_ID = 1
	WHERE EDW_KEY IS NULL
)BK_CHECK,
(
	SELECT COUNT(*) CORE_CNT
	FROM (SELECT * FROM GPROD1V_UTLFW.BKEY_1_PRTY WHERE DOMAIN_ID=1)BK1
	INNER JOIN GPROD1V_STG.VIRUS_C_PERSON_DETAILS SRC ON BK1.SOURCE_KEY = TRIM(NATIONAL_ID)
	LEFT JOIN GPROD1V_BASE.INDIV_MEDCL_MSR CORE ON EDW_KEY = INDIV_PRTY_ID
	WHERE INDIV_PRTY_ID IS NULL
)CORE_CHECK;

-- L1_INDIV_MEDCL_MSR_L0_VIRUS_C_PERSON_DETAILS_BODY_MASS_INDICATOR -- VIRUS_C_PERSON_DETAILS -- BKEY_1_PRTY
SELECT	'INDIV_MEDCL_MSR' AS CORE_TABLE,
		'INDIV_PRTY_ID' AS CORE_COLUMN,
		'L1_INDIV_MEDCL_MSR_L0_VIRUS_C_PERSON_DETAILS_BODY_MASS_INDICATOR' AS MAPPING_NAME,
		CASE WHEN BKEY_CNT > 0 THEN 'BKEY_FAILED' ELSE 'BKEY_SUCCEEDED' END AS BKEY_STATUS,
		CASE WHEN CORE_CNT > 0 THEN 'CORE_FAILED' ELSE 'CORE_SUCCEEDED' END AS CORE_STATUS
FROM
(
	SELECT COUNT(*) BKEY_CNT
	FROM GPROD1V_STG.VIRUS_C_PERSON_DETAILS X
	LEFT JOIN GPROD1V_UTLFW.BKEY_1_PRTY AS BK1
	ON BK1.SOURCE_KEY = TRIM(NATIONAL_ID) AND BK1.DOMAIN_ID = 1
	WHERE EDW_KEY IS NULL
)BK_CHECK,
(
	SELECT COUNT(*) CORE_CNT
	FROM (SELECT * FROM GPROD1V_UTLFW.BKEY_1_PRTY WHERE DOMAIN_ID=1)BK1
	INNER JOIN GPROD1V_STG.VIRUS_C_PERSON_DETAILS SRC ON BK1.SOURCE_KEY = TRIM(NATIONAL_ID)
	LEFT JOIN GPROD1V_BASE.INDIV_MEDCL_MSR CORE ON EDW_KEY = INDIV_PRTY_ID
	WHERE INDIV_PRTY_ID IS NULL
)CORE_CHECK;

-- L1_INDIV_MEDCL_MSR_L0_VIRUS_C_PERSON_DETAILS_BODY_DIABETES_RESULT -- VIRUS_C_PERSON_DETAILS -- BKEY_1_PRTY
SELECT	'INDIV_MEDCL_MSR' AS CORE_TABLE,
		'INDIV_PRTY_ID' AS CORE_COLUMN,
		'L1_INDIV_MEDCL_MSR_L0_VIRUS_C_PERSON_DETAILS_BODY_DIABETES_RESULT' AS MAPPING_NAME,
		CASE WHEN BKEY_CNT > 0 THEN 'BKEY_FAILED' ELSE 'BKEY_SUCCEEDED' END AS BKEY_STATUS,
		CASE WHEN CORE_CNT > 0 THEN 'CORE_FAILED' ELSE 'CORE_SUCCEEDED' END AS CORE_STATUS
FROM
(
	SELECT COUNT(*) BKEY_CNT
	FROM GPROD1V_STG.VIRUS_C_PERSON_DETAILS X
	LEFT JOIN GPROD1V_UTLFW.BKEY_1_PRTY AS BK1
	ON BK1.SOURCE_KEY = TRIM(NATIONAL_ID) AND BK1.DOMAIN_ID = 1
	WHERE EDW_KEY IS NULL
)BK_CHECK,
(
	SELECT COUNT(*) CORE_CNT
	FROM (SELECT * FROM GPROD1V_UTLFW.BKEY_1_PRTY WHERE DOMAIN_ID=1)BK1
	INNER JOIN GPROD1V_STG.VIRUS_C_PERSON_DETAILS SRC ON BK1.SOURCE_KEY = TRIM(NATIONAL_ID)
	LEFT JOIN GPROD1V_BASE.INDIV_MEDCL_MSR CORE ON EDW_KEY = INDIV_PRTY_ID
	WHERE INDIV_PRTY_ID IS NULL
)CORE_CHECK;

-- L1_INDIV_MEDCL_MSR_L0_VIRUS_C_PERSON_DETAILS_HEIGHT -- VIRUS_C_PERSON_DETAILS -- BKEY_1_PRTY
SELECT	'INDIV_MEDCL_MSR' AS CORE_TABLE,
		'INDIV_PRTY_ID' AS CORE_COLUMN,
		'L1_INDIV_MEDCL_MSR_L0_VIRUS_C_PERSON_DETAILS_HEIGHT' AS MAPPING_NAME,
		CASE WHEN BKEY_CNT > 0 THEN 'BKEY_FAILED' ELSE 'BKEY_SUCCEEDED' END AS BKEY_STATUS,
		CASE WHEN CORE_CNT > 0 THEN 'CORE_FAILED' ELSE 'CORE_SUCCEEDED' END AS CORE_STATUS
FROM
(
	SELECT COUNT(*) BKEY_CNT
	FROM GPROD1V_STG.VIRUS_C_PERSON_DETAILS X
	LEFT JOIN GPROD1V_UTLFW.BKEY_1_PRTY AS BK1
	ON BK1.SOURCE_KEY = TRIM(NATIONAL_ID) AND BK1.DOMAIN_ID = 1
	WHERE EDW_KEY IS NULL
)BK_CHECK,
(
	SELECT COUNT(*) CORE_CNT
	FROM (SELECT * FROM GPROD1V_UTLFW.BKEY_1_PRTY WHERE DOMAIN_ID=1)BK1
	INNER JOIN GPROD1V_STG.VIRUS_C_PERSON_DETAILS SRC ON BK1.SOURCE_KEY = TRIM(NATIONAL_ID)
	LEFT JOIN GPROD1V_BASE.INDIV_MEDCL_MSR CORE ON EDW_KEY = INDIV_PRTY_ID
	WHERE INDIV_PRTY_ID IS NULL
)CORE_CHECK;

-- L1_INDIV_MEDCL_MSR_L0_VIRUS_C_PERSON_DETAILS_WEIGHT -- VIRUS_C_PERSON_DETAILS -- BKEY_1_PRTY
SELECT	'INDIV_MEDCL_MSR' AS CORE_TABLE,
		'INDIV_PRTY_ID' AS CORE_COLUMN,
		'L1_INDIV_MEDCL_MSR_L0_VIRUS_C_PERSON_DETAILS_WEIGHT' AS MAPPING_NAME,
		CASE WHEN BKEY_CNT > 0 THEN 'BKEY_FAILED' ELSE 'BKEY_SUCCEEDED' END AS BKEY_STATUS,
		CASE WHEN CORE_CNT > 0 THEN 'CORE_FAILED' ELSE 'CORE_SUCCEEDED' END AS CORE_STATUS
FROM
(
	SELECT COUNT(*) BKEY_CNT
	FROM GPROD1V_STG.VIRUS_C_PERSON_DETAILS X
	LEFT JOIN GPROD1V_UTLFW.BKEY_1_PRTY AS BK1
	ON BK1.SOURCE_KEY = TRIM(NATIONAL_ID) AND BK1.DOMAIN_ID = 1
	WHERE EDW_KEY IS NULL
)BK_CHECK,
(
	SELECT COUNT(*) CORE_CNT
	FROM (SELECT * FROM GPROD1V_UTLFW.BKEY_1_PRTY WHERE DOMAIN_ID=1)BK1
	INNER JOIN GPROD1V_STG.VIRUS_C_PERSON_DETAILS SRC ON BK1.SOURCE_KEY = TRIM(NATIONAL_ID)
	LEFT JOIN GPROD1V_BASE.INDIV_MEDCL_MSR CORE ON EDW_KEY = INDIV_PRTY_ID
	WHERE INDIV_PRTY_ID IS NULL
)CORE_CHECK;

-- L1_PRTY_DEMOG_L0_VIRUS_C_PERSON_DETAILS_HEALTH_INSURANCE_FLAG -- VIRUS_C_PERSON_DETAILS -- BKEY_1_PRTY
SELECT	'PRTY_DEMOG' AS CORE_TABLE,
		'PRTY_ID' AS CORE_COLUMN,
		'L1_PRTY_DEMOG_L0_VIRUS_C_PERSON_DETAILS_HEALTH_INSURANCE_FLAG' AS MAPPING_NAME,
		CASE WHEN BKEY_CNT > 0 THEN 'BKEY_FAILED' ELSE 'BKEY_SUCCEEDED' END AS BKEY_STATUS,
		CASE WHEN CORE_CNT > 0 THEN 'CORE_FAILED' ELSE 'CORE_SUCCEEDED' END AS CORE_STATUS
FROM
(
	SELECT COUNT(*) BKEY_CNT
	FROM GPROD1V_STG.VIRUS_C_PERSON_DETAILS X
	LEFT JOIN GPROD1V_UTLFW.BKEY_1_PRTY AS BK1
	ON BK1.SOURCE_KEY = TRIM(NATIONAL_ID) AND BK1.DOMAIN_ID = 1
	WHERE EDW_KEY IS NULL
)BK_CHECK,
(
	SELECT COUNT(*) CORE_CNT
	FROM (SELECT * FROM GPROD1V_UTLFW.BKEY_1_PRTY WHERE DOMAIN_ID=1)BK1
	INNER JOIN GPROD1V_STG.VIRUS_C_PERSON_DETAILS SRC ON BK1.SOURCE_KEY = TRIM(NATIONAL_ID)
	LEFT JOIN GPROD1V_BASE.PRTY_DEMOG CORE ON EDW_KEY = PRTY_ID
	WHERE PRTY_ID IS NULL
)CORE_CHECK;

